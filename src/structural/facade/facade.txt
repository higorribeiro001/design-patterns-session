-> Intenção:

Façade (Fachada) é um padrão de objeto estrutural que tem a intenção de fornecer uma interface unificada para todo um conjunto de interfaces em um subsistema. Façade define uma interface de nível mais alto que torna o subsistema mais fácil de ser usado

-> Sobre:

O Façade é o padrão mais simples de todos. Ele tem a intenção de facilitar a vida do código cliente ao criar um objeto de fachada para um sistema mais complexo.

Imagine ter que instanciar várias classes, passar objetos como parâmetro apenas para iniciar um sistema. O Façade ajudará você a não poluir o código do cliente com todo esse código. Ele visa fornecer uma interface muito mais simpes e unificada em um objeto que o cliente pode simplesmente chamar métodos e obter o comportamento desejado.

Pense no Façade como uma pessoa que atende telefones em um call center cheio de setores. O foco dessa pessoa é coletar informações com o cliente para saber qual setor direcionar a ligação. O Façade é simples assim.

É importante ressaltar que o Façade não tem a intenção de ocultar nada do código cliente, a ideia é simplesmente facilitar o uso do sistema. O cliente ainda poderá usar os objetos do sistema diretamente se necessário.

Com esse padrão visa unificar coisas que poderiam estar separadas no sistema.

-> Aplicabilidade:

Use o padrão façade quando:

- você quer disponibilizar uma interface mais simples para um sistema complexo
- você quer criar pontos de entrada para determinadas partes do sistema, como serviços externos, camadas da aplicação e objetos complexos dentro em determinadas partes do código

-> Bom:

- Isola o código complexo do código cliente
- Facilita o uso do sistema
- Cria pontos de entrada para camadas da aplicação e serviços de terceiros

-> Ruim:

- O objeto façade se torna facilmente uma "*God class*" (Use fachadas adicionais se perceber que isso está ocorrendo no seu código)
